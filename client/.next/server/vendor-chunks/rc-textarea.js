"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/rc-textarea";
exports.ids = ["vendor-chunks/rc-textarea"];
exports.modules = {

/***/ "./node_modules/rc-textarea/lib/ResizableTextArea.js":
/*!***********************************************************!*\
  !*** ./node_modules/rc-textarea/lib/ResizableTextArea.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\nvar _typeof3 = __webpack_require__(/*! @babel/runtime/helpers/typeof */ \"./node_modules/@babel/runtime/helpers/typeof.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _extends2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/extends */ \"./node_modules/@babel/runtime/helpers/extends.js\"));\nvar _defineProperty2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"./node_modules/@babel/runtime/helpers/defineProperty.js\"));\nvar _objectSpread2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/objectSpread2 */ \"./node_modules/@babel/runtime/helpers/objectSpread2.js\"));\nvar _typeof2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/typeof */ \"./node_modules/@babel/runtime/helpers/typeof.js\"));\nvar _slicedToArray2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ \"./node_modules/@babel/runtime/helpers/slicedToArray.js\"));\nvar _objectWithoutProperties2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/objectWithoutProperties */ \"./node_modules/@babel/runtime/helpers/objectWithoutProperties.js\"));\nvar React = _interopRequireWildcard(__webpack_require__(/*! react */ \"react\"));\nvar _rcResizeObserver = _interopRequireDefault(__webpack_require__(/*! rc-resize-observer */ \"./node_modules/rc-resize-observer/lib/index.js\"));\nvar _useLayoutEffect = _interopRequireDefault(__webpack_require__(/*! rc-util/lib/hooks/useLayoutEffect */ \"./node_modules/rc-util/lib/hooks/useLayoutEffect.js\"));\nvar _raf = _interopRequireDefault(__webpack_require__(/*! rc-util/lib/raf */ \"./node_modules/rc-util/lib/raf.js\"));\nvar _useMergedState3 = _interopRequireDefault(__webpack_require__(/*! rc-util/lib/hooks/useMergedState */ \"./node_modules/rc-util/lib/hooks/useMergedState.js\"));\nvar _classnames = _interopRequireDefault(__webpack_require__(/*! classnames */ \"classnames\"));\nvar _calculateNodeHeight = _interopRequireDefault(__webpack_require__(/*! ./calculateNodeHeight */ \"./node_modules/rc-textarea/lib/calculateNodeHeight.js\"));\nvar _excluded = [\n    \"prefixCls\",\n    \"onPressEnter\",\n    \"defaultValue\",\n    \"value\",\n    \"autoSize\",\n    \"onResize\",\n    \"className\",\n    \"style\",\n    \"disabled\",\n    \"onChange\",\n    \"onInternalAutoSize\"\n];\nfunction _getRequireWildcardCache(nodeInterop) {\n    if (typeof WeakMap !== \"function\") return null;\n    var cacheBabelInterop = new WeakMap();\n    var cacheNodeInterop = new WeakMap();\n    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n    })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n    if (!nodeInterop && obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || _typeof3(obj) !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache(nodeInterop);\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nvar RESIZE_START = 0;\nvar RESIZE_MEASURING = 1;\nvar RESIZE_STABLE = 2;\nvar ResizableTextArea = /*#__PURE__*/ React.forwardRef(function(props, ref) {\n    var _props$prefixCls = props.prefixCls, prefixCls = _props$prefixCls === void 0 ? \"rc-textarea\" : _props$prefixCls, onPressEnter = props.onPressEnter, defaultValue = props.defaultValue, value = props.value, autoSize = props.autoSize, onResize = props.onResize, className = props.className, style = props.style, disabled = props.disabled, onChange = props.onChange, onInternalAutoSize = props.onInternalAutoSize, restProps = (0, _objectWithoutProperties2.default)(props, _excluded);\n    // =============================== Value ================================\n    var _useMergedState = (0, _useMergedState3.default)(defaultValue, {\n        value: value,\n        postState: function postState(val) {\n            return val !== null && val !== void 0 ? val : \"\";\n        }\n    }), _useMergedState2 = (0, _slicedToArray2.default)(_useMergedState, 2), mergedValue = _useMergedState2[0], setMergedValue = _useMergedState2[1];\n    var onInternalChange = function onInternalChange(event) {\n        setMergedValue(event.target.value);\n        onChange === null || onChange === void 0 ? void 0 : onChange(event);\n    };\n    // ================================ Ref =================================\n    var textareaRef = React.useRef();\n    React.useImperativeHandle(ref, function() {\n        return {\n            textArea: textareaRef.current\n        };\n    });\n    // ============================== AutoSize ==============================\n    var _React$useMemo = React.useMemo(function() {\n        if (autoSize && (0, _typeof2.default)(autoSize) === \"object\") {\n            return [\n                autoSize.minRows,\n                autoSize.maxRows\n            ];\n        }\n        return [];\n    }, [\n        autoSize\n    ]), _React$useMemo2 = (0, _slicedToArray2.default)(_React$useMemo, 2), minRows = _React$useMemo2[0], maxRows = _React$useMemo2[1];\n    var needAutoSize = !!autoSize;\n    // =============================== Scroll ===============================\n    // https://github.com/ant-design/ant-design/issues/21870\n    var fixFirefoxAutoScroll = function fixFirefoxAutoScroll() {\n        try {\n            // FF has bug with jump of scroll to top. We force back here.\n            if (document.activeElement === textareaRef.current) {\n                var _textareaRef$current = textareaRef.current, selectionStart = _textareaRef$current.selectionStart, selectionEnd = _textareaRef$current.selectionEnd, scrollTop = _textareaRef$current.scrollTop;\n                // Fix Safari bug which not rollback when break line\n                // This makes Chinese IME can't input. Do not fix this\n                // const { value: tmpValue } = textareaRef.current;\n                // textareaRef.current.value = '';\n                // textareaRef.current.value = tmpValue;\n                textareaRef.current.setSelectionRange(selectionStart, selectionEnd);\n                textareaRef.current.scrollTop = scrollTop;\n            }\n        } catch (e) {\n        // Fix error in Chrome:\n        // Failed to read the 'selectionStart' property from 'HTMLInputElement'\n        // http://stackoverflow.com/q/21177489/3040605\n        }\n    };\n    // =============================== Resize ===============================\n    var _React$useState = React.useState(RESIZE_STABLE), _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2), resizeState = _React$useState2[0], setResizeState = _React$useState2[1];\n    var _React$useState3 = React.useState(), _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2), autoSizeStyle = _React$useState4[0], setAutoSizeStyle = _React$useState4[1];\n    var startResize = function startResize() {\n        setResizeState(RESIZE_START);\n        if (false) {}\n    };\n    // Change to trigger resize measure\n    (0, _useLayoutEffect.default)(function() {\n        if (needAutoSize) {\n            startResize();\n        }\n    }, [\n        value,\n        minRows,\n        maxRows,\n        needAutoSize\n    ]);\n    (0, _useLayoutEffect.default)(function() {\n        if (resizeState === RESIZE_START) {\n            setResizeState(RESIZE_MEASURING);\n        } else if (resizeState === RESIZE_MEASURING) {\n            var textareaStyles = (0, _calculateNodeHeight.default)(textareaRef.current, false, minRows, maxRows);\n            // Safari has bug that text will keep break line on text cut when it's prev is break line.\n            // ZombieJ: This not often happen. So we just skip it.\n            // const { selectionStart, selectionEnd, scrollTop } = textareaRef.current;\n            // const { value: tmpValue } = textareaRef.current;\n            // textareaRef.current.value = '';\n            // textareaRef.current.value = tmpValue;\n            // if (document.activeElement === textareaRef.current) {\n            //   textareaRef.current.scrollTop = scrollTop;\n            //   textareaRef.current.setSelectionRange(selectionStart, selectionEnd);\n            // }\n            setResizeState(RESIZE_STABLE);\n            setAutoSizeStyle(textareaStyles);\n        } else {\n            fixFirefoxAutoScroll();\n        }\n    }, [\n        resizeState\n    ]);\n    // We lock resize trigger by raf to avoid Safari warning\n    var resizeRafRef = React.useRef();\n    var cleanRaf = function cleanRaf() {\n        _raf.default.cancel(resizeRafRef.current);\n    };\n    var onInternalResize = function onInternalResize(size) {\n        if (resizeState === RESIZE_STABLE) {\n            onResize === null || onResize === void 0 ? void 0 : onResize(size);\n            if (autoSize) {\n                cleanRaf();\n                resizeRafRef.current = (0, _raf.default)(function() {\n                    startResize();\n                });\n            }\n        }\n    };\n    React.useEffect(function() {\n        return cleanRaf;\n    }, []);\n    // =============================== Render ===============================\n    var mergedAutoSizeStyle = needAutoSize ? autoSizeStyle : null;\n    var mergedStyle = (0, _objectSpread2.default)((0, _objectSpread2.default)({}, style), mergedAutoSizeStyle);\n    if (resizeState === RESIZE_START || resizeState === RESIZE_MEASURING) {\n        mergedStyle.overflowY = \"hidden\";\n        mergedStyle.overflowX = \"hidden\";\n    }\n    return /*#__PURE__*/ React.createElement(_rcResizeObserver.default, {\n        onResize: onInternalResize,\n        disabled: !(autoSize || onResize)\n    }, /*#__PURE__*/ React.createElement(\"textarea\", (0, _extends2.default)({}, restProps, {\n        ref: textareaRef,\n        style: mergedStyle,\n        className: (0, _classnames.default)(prefixCls, className, (0, _defineProperty2.default)({}, \"\".concat(prefixCls, \"-disabled\"), disabled)),\n        disabled: disabled,\n        value: mergedValue,\n        onChange: onInternalChange\n    })));\n});\nvar _default = ResizableTextArea;\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/rc-textarea/lib/ResizableTextArea.js\n");

/***/ }),

/***/ "./node_modules/rc-textarea/lib/calculateNodeHeight.js":
/*!*************************************************************!*\
  !*** ./node_modules/rc-textarea/lib/calculateNodeHeight.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.calculateNodeStyling = calculateNodeStyling;\nexports[\"default\"] = calculateAutoSizeStyle;\n// Thanks to https://github.com/andreypopp/react-textarea-autosize/\n/**\n * calculateNodeHeight(uiTextNode, useCache = false)\n */ var HIDDEN_TEXTAREA_STYLE = \"\\n  min-height:0 !important;\\n  max-height:none !important;\\n  height:0 !important;\\n  visibility:hidden !important;\\n  overflow:hidden !important;\\n  position:absolute !important;\\n  z-index:-1000 !important;\\n  top:0 !important;\\n  right:0 !important;\\n  pointer-events: none !important;\\n\";\nvar SIZING_STYLE = [\n    \"letter-spacing\",\n    \"line-height\",\n    \"padding-top\",\n    \"padding-bottom\",\n    \"font-family\",\n    \"font-weight\",\n    \"font-size\",\n    \"font-variant\",\n    \"text-rendering\",\n    \"text-transform\",\n    \"width\",\n    \"text-indent\",\n    \"padding-left\",\n    \"padding-right\",\n    \"border-width\",\n    \"box-sizing\",\n    \"word-break\"\n];\nvar computedStyleCache = {};\nvar hiddenTextarea;\nfunction calculateNodeStyling(node) {\n    var useCache = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var nodeRef = node.getAttribute(\"id\") || node.getAttribute(\"data-reactid\") || node.getAttribute(\"name\");\n    if (useCache && computedStyleCache[nodeRef]) {\n        return computedStyleCache[nodeRef];\n    }\n    var style = window.getComputedStyle(node);\n    var boxSizing = style.getPropertyValue(\"box-sizing\") || style.getPropertyValue(\"-moz-box-sizing\") || style.getPropertyValue(\"-webkit-box-sizing\");\n    var paddingSize = parseFloat(style.getPropertyValue(\"padding-bottom\")) + parseFloat(style.getPropertyValue(\"padding-top\"));\n    var borderSize = parseFloat(style.getPropertyValue(\"border-bottom-width\")) + parseFloat(style.getPropertyValue(\"border-top-width\"));\n    var sizingStyle = SIZING_STYLE.map(function(name) {\n        return \"\".concat(name, \":\").concat(style.getPropertyValue(name));\n    }).join(\";\");\n    var nodeInfo = {\n        sizingStyle: sizingStyle,\n        paddingSize: paddingSize,\n        borderSize: borderSize,\n        boxSizing: boxSizing\n    };\n    if (useCache && nodeRef) {\n        computedStyleCache[nodeRef] = nodeInfo;\n    }\n    return nodeInfo;\n}\nfunction calculateAutoSizeStyle(uiTextNode) {\n    var useCache = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var minRows = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    var maxRows = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    if (!hiddenTextarea) {\n        hiddenTextarea = document.createElement(\"textarea\");\n        hiddenTextarea.setAttribute(\"tab-index\", \"-1\");\n        hiddenTextarea.setAttribute(\"aria-hidden\", \"true\");\n        document.body.appendChild(hiddenTextarea);\n    }\n    // Fix wrap=\"off\" issue\n    // https://github.com/ant-design/ant-design/issues/6577\n    if (uiTextNode.getAttribute(\"wrap\")) {\n        hiddenTextarea.setAttribute(\"wrap\", uiTextNode.getAttribute(\"wrap\"));\n    } else {\n        hiddenTextarea.removeAttribute(\"wrap\");\n    }\n    // Copy all CSS properties that have an impact on the height of the content in\n    // the textbox\n    var _calculateNodeStyling = calculateNodeStyling(uiTextNode, useCache), paddingSize = _calculateNodeStyling.paddingSize, borderSize = _calculateNodeStyling.borderSize, boxSizing = _calculateNodeStyling.boxSizing, sizingStyle = _calculateNodeStyling.sizingStyle;\n    // Need to have the overflow attribute to hide the scrollbar otherwise\n    // text-lines will not calculated properly as the shadow will technically be\n    // narrower for content\n    hiddenTextarea.setAttribute(\"style\", \"\".concat(sizingStyle, \";\").concat(HIDDEN_TEXTAREA_STYLE));\n    hiddenTextarea.value = uiTextNode.value || uiTextNode.placeholder || \"\";\n    var minHeight = undefined;\n    var maxHeight = undefined;\n    var overflowY;\n    var height = hiddenTextarea.scrollHeight;\n    if (boxSizing === \"border-box\") {\n        // border-box: add border, since height = content + padding + border\n        height += borderSize;\n    } else if (boxSizing === \"content-box\") {\n        // remove padding, since height = content\n        height -= paddingSize;\n    }\n    if (minRows !== null || maxRows !== null) {\n        // measure height of a textarea with a single row\n        hiddenTextarea.value = \" \";\n        var singleRowHeight = hiddenTextarea.scrollHeight - paddingSize;\n        if (minRows !== null) {\n            minHeight = singleRowHeight * minRows;\n            if (boxSizing === \"border-box\") {\n                minHeight = minHeight + paddingSize + borderSize;\n            }\n            height = Math.max(minHeight, height);\n        }\n        if (maxRows !== null) {\n            maxHeight = singleRowHeight * maxRows;\n            if (boxSizing === \"border-box\") {\n                maxHeight = maxHeight + paddingSize + borderSize;\n            }\n            overflowY = height > maxHeight ? \"\" : \"hidden\";\n            height = Math.min(maxHeight, height);\n        }\n    }\n    var style = {\n        height: height,\n        overflowY: overflowY,\n        resize: \"none\"\n    };\n    if (minHeight) {\n        style.minHeight = minHeight;\n    }\n    if (maxHeight) {\n        style.maxHeight = maxHeight;\n    }\n    return style;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/rc-textarea/lib/calculateNodeHeight.js\n");

/***/ }),

/***/ "./node_modules/rc-textarea/lib/index.js":
/*!***********************************************!*\
  !*** ./node_modules/rc-textarea/lib/index.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\nvar _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ \"./node_modules/@babel/runtime/helpers/typeof.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"ResizableTextArea\", ({\n    enumerable: true,\n    get: function get() {\n        return _ResizableTextArea.default;\n    }\n}));\nexports[\"default\"] = void 0;\nvar _extends2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/extends */ \"./node_modules/@babel/runtime/helpers/extends.js\"));\nvar _classCallCheck2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ \"./node_modules/@babel/runtime/helpers/classCallCheck.js\"));\nvar _createClass2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/createClass */ \"./node_modules/@babel/runtime/helpers/createClass.js\"));\nvar _inherits2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/inherits */ \"./node_modules/@babel/runtime/helpers/inherits.js\"));\nvar _createSuper2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/createSuper */ \"./node_modules/@babel/runtime/helpers/createSuper.js\"));\nvar React = _interopRequireWildcard(__webpack_require__(/*! react */ \"react\"));\nvar _ResizableTextArea = _interopRequireDefault(__webpack_require__(/*! ./ResizableTextArea */ \"./node_modules/rc-textarea/lib/ResizableTextArea.js\"));\nfunction _getRequireWildcardCache(nodeInterop) {\n    if (typeof WeakMap !== \"function\") return null;\n    var cacheBabelInterop = new WeakMap();\n    var cacheNodeInterop = new WeakMap();\n    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n    })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n    if (!nodeInterop && obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache(nodeInterop);\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nvar TextArea = /*#__PURE__*/ function(_React$Component) {\n    (0, _inherits2.default)(TextArea, _React$Component);\n    var _super = (0, _createSuper2.default)(TextArea);\n    function TextArea(props) {\n        var _this;\n        (0, _classCallCheck2.default)(this, TextArea);\n        _this = _super.call(this, props);\n        _this.resizableTextArea = void 0;\n        _this.focus = function() {\n            _this.resizableTextArea.textArea.focus();\n        };\n        _this.saveTextArea = function(resizableTextArea) {\n            _this.resizableTextArea = resizableTextArea;\n        };\n        _this.handleChange = function(e) {\n            var onChange = _this.props.onChange;\n            _this.setValue(e.target.value);\n            if (onChange) {\n                onChange(e);\n            }\n        };\n        _this.handleKeyDown = function(e) {\n            var _this$props = _this.props, onPressEnter = _this$props.onPressEnter, onKeyDown = _this$props.onKeyDown;\n            if (e.keyCode === 13 && onPressEnter) {\n                onPressEnter(e);\n            }\n            if (onKeyDown) {\n                onKeyDown(e);\n            }\n        };\n        var value = typeof props.value === \"undefined\" || props.value === null ? props.defaultValue : props.value;\n        _this.state = {\n            value: value\n        };\n        return _this;\n    }\n    (0, _createClass2.default)(TextArea, [\n        {\n            key: \"setValue\",\n            value: function setValue(value, callback) {\n                if (!(\"value\" in this.props)) {\n                    this.setState({\n                        value: value\n                    }, callback);\n                }\n            }\n        },\n        {\n            key: \"blur\",\n            value: function blur() {\n                this.resizableTextArea.textArea.blur();\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                return /*#__PURE__*/ React.createElement(_ResizableTextArea.default, (0, _extends2.default)({}, this.props, {\n                    value: this.state.value,\n                    onKeyDown: this.handleKeyDown,\n                    onChange: this.handleChange,\n                    ref: this.saveTextArea\n                }));\n            }\n        }\n    ], [\n        {\n            key: \"getDerivedStateFromProps\",\n            value: function getDerivedStateFromProps(nextProps) {\n                if (\"value\" in nextProps) {\n                    return {\n                        value: nextProps.value\n                    };\n                }\n                return null;\n            }\n        }\n    ]);\n    return TextArea;\n}(React.Component);\nvar _default = TextArea;\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/rc-textarea/lib/index.js\n");

/***/ })

};
;